#!/usr/bin/env bash

set -Eeuo pipefail

die() { echo "$1" 1>&2; exit 1; }

# Required env vars.
[ -n "${BIN_NAME:-}" ] || die "Must set BIN_NAME"
[ -n "${VERSION:-}" ] || die "Must set VERSION"
[ -n "${REVISION:-}" ] || die "Must set REVISION"
[ -n "${DOCKERFILE:-}" ] || die "Must set DOCKERFILE"
[ -n "${TARGET:-}" ] || die "Must set TARGET"
[ -n "${TARBALL_NAME:-}" ] || die "Must set TARBALL_NAME"
[ -n "${DEV_TARBALL_NAME:-}" ] || die "Must set DEV_TARBALL_NAME"
[ -n "${REDHAT_TARBALL_NAME:-}" ] || die "Must set REDHAT_TARBALL_NAME"
[ -n "${PLATFORM:-}" ] || die "Must set PLATFORM"
[ -n "${AUTO_TAG:-}" ] || die "Must set AUTO_TAG"
[ -n "${TAGS:-}${REDHAT_TAG:-}" ] || die "Must set either TAG or REDHAT_TAG"
[ -z "${TAGS:-}" ] || [ -z "${REDHAT_TAG:-}" ] || die "Must set either TAG or REDHAT_TAG (not both)"


WORKDIR="${WORKDIR:-.}"

export DEV_TAGS="${DEV_TAGS:-}"
export REDHAT_TAG="${REDHAT_TAG:-}"

# Convert all contiguous blocks of whitespace to single spaces using xargs.
# This is needed to get all tags on one line for the read -ra below.
PROD_TAGS="$(xargs <<< "$TAGS")"
DEV_TAGS="$(xargs <<< "$DEV_TAGS")"

read -ra DEV_TAGS_A <<< "$DEV_TAGS"
read -ra PROD_TAGS_A <<< "$PROD_TAGS"

ALL_TAGS=("${DEV_TAGS_A[@]}")
ALL_TAGS+=("$AUTO_TAG")
ALL_TAGS+=("${PROD_TAGS_A[@]}")
if [ -n "$REDHAT_TAG" ]; then
	ALL_TAGS+=("${REDHAT_TAG}")
fi
echo "ALL_TAGS:" "${ALL_TAGS[@]}"


for T in "${ALL_TAGS[@]}"; do
	TAG_FLAGS+=("--tag=$T")
done

BUILD_ARGS=("BIN_NAME=$BIN_NAME")
BUILD_ARGS+=("PRODUCT_VERSION=$VERSION")
BUILD_ARGS+=("PRODUCT_REVISION=$REVISION")

for B in "${BUILD_ARGS[@]}"; do
	BA_FLAGS+=("--build-arg=$B")
done
if [[ "$OS" == "windows" ]]; then
  # Warning: Our Dockerfiles refer to TARGETOS and TARGETARCH.
  # They claim it's set "automatically when --platform is provided."
  # Lies.
  # Maybe that's a buildx feature, because build doesn't. So we need to manually inject it.
  BA_FLAGS+=(
    "--build-arg=TARGETOS=${OS}"
    "--build-arg=TARGETARCH=${PLATFORM#*/}"
  )
fi

TARBALL_PATH="$PWD/$TARBALL_NAME"
DEV_TARBALL_PATH="$PWD/$DEV_TARBALL_NAME"
REDHAT_TARBALL_PATH="$PWD/$REDHAT_TARBALL_NAME"

cd "$WORKDIR"


echo "==> Building image with tags:"
for T in "${ALL_TAGS[@]}"; do
  echo "    - $T"
done

if [[ "$OS" == "linux" ]]; then
docker buildx create --use
docker buildx build --load \
  --target "$TARGET" \
  --platform "$PLATFORM" \
  "${TAG_FLAGS[@]}" \
  "${BA_FLAGS[@]}" \
  -f "$DOCKERFILE" \
  .
else
  (set -x;
  docker build \
  --target "$TARGET" \
  --platform "$PLATFORM" \
  "${TAG_FLAGS[@]}" \
  "${BA_FLAGS[@]}" \
  -f "$DOCKERFILE" \
  .
  )
fi

# validate version label is set to the correct value
version_label_validation() {
	val=$(docker inspect --format='{{ index .Config.Labels "version" }}' "${2}")
	error_context="actions-docker-build passes a 'PRODUCT_VERSION' build-arg to the build. Ensure it is defined in the Dockerfile and the 'version' label uses it"
	if [ "$val" = "" ]; then
		die "Error: 'version' label must be set to version passed in but was empty.\n$error_context"
	elif [ "$val" != "${1}" ]; then
		die "Error: 'version' label must match the version passed in but was ($val).\n$error_context"
	fi
}

for T in "${ALL_TAGS[@]}"; do
	version_label_validation "$VERSION" "$T"
done

echo "==> Saving prod tags in '$TARBALL_PATH'"

docker save --output "$TARBALL_PATH" "${PROD_TAGS_A[@]}" "$AUTO_TAG"
echo "==> Tarball created."
ls -lah "$TARBALL_PATH"

if [ -n "$DEV_TAGS" ]; then
	echo "==> Saving dev tags in '$DEV_TARBALL_PATH'"
	docker save --output "$DEV_TARBALL_PATH" "${DEV_TAGS_A[@]}" "$AUTO_TAG"
	echo "==> Dev Tarball created."
	ls -lah "$DEV_TARBALL_PATH"
else
	echo "==> No dev tags specified, skipping export."
fi

if [ -n "$REDHAT_TAG" ]; then
	echo "==> Saving Redhat tag '$REDHAT_TAG' to '$REDHAT_TARBALL_PATH'"
	docker save --output "$REDHAT_TARBALL_PATH" "${REDHAT_TAG}" "$AUTO_TAG"
	echo "==> Redhat Tarball created."
	ls -lah "$REDHAT_TARBALL_PATH"
else
	echo "==> No Redhat tag specified, skipping export."
fi
