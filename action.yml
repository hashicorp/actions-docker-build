name: docker-build
author: Release Engineering <rel-eng@hashicorp.com>
description: Builds and stores Docker images.

inputs:

  # Required explicit inputs.
  version:
    description: Version of the product, e.g. "X.Y.Z[-pre][+edition]".
    required: true

  arch:
    description: Target image architecture.
    required: true

  tags:
    description: >
      Whitespace-separated fully-qualified image names.
      Each tag must be in the format: <registry>/[<namespace>/]<repository>:<tag>
    required: true

  # General purpose inputs.
  target:
    description: >
      Dockerfile target stage to build.
      You should set this explicitly if your Dockerfile contains more than one target.
      You should use the target name (i.e. FROM ... AS <target name>) not the index.
      Defaults to 0, meaning the first target defined (fine if only one target).
    default: "0"

  arm_version:
    description: Version of arm architecture to use (ignored unless arch == arm).
    default: 6

  dev_tags:
    description: Tags to use for publishing development images (optional).
    default: ""
  
  smoke_test:
    description: > 
      Bash shell script to run as a smoke test against the built image.
      Inside the script, you will have access to a variable called 'IMAGE_NAME' 
      which you can use in your test to run the image. The script currently only
      run against the `linux/amd64` build and will have access to a local docker
      daemon. Tests should not be specific to `amd64` arch nor rely on the daemon
      being local as these may change later to enable testing to all other images.
      The script must exit non-zero in order to mark the test as failed.
    required: false
    default: ""

  # Optional inputs whose values are guessed if left blank.
  zip_artifact_name:
    description: >
      Name of zip file artifact to download. If left empty defaults to
      ${PKG_NAME}_${OS}_${ARCH}.zip.
    default: ""

  pkg_name:
    description: >
      Only used to determine default zip name.
      Defaults to <repo-name(minus -enterprise)>_<version>[+ent]
      if left blank.
    default: ""

  bin_name:
    description: >
      Name of the product binary inside the zip file. If empty (which is the default)
      then the name is guessed using repo name with any -enteprise suffix removed.
    default: ""

  # Escape hatch inputs (use sparingly if at all).
  workdir:
    description: Working directory in which to run 'docker build'.
    default: .

  dockerfile:
    description: Dockerfile path relative to workdir.
    default: Dockerfile

# action runner (golang:latest image)
runs:
  using: composite
  #env:
  #  DOCKER_BUILDKIT: 1
  #  BUILDKIT_PROGRESS: plain
  steps:
    - name: Set required repo name env var
      shell: bash
      run: echo "REPO_NAME=$(echo ${{ github.repository }} | cut -f2 -d "/")" >> $GITHUB_ENV

    - name: Digest Inputs - Calculate Variables for Later Steps
      shell: bash
      env:

        # Required.
        REVISION: "${{ github.sha }}"
        VERSION: "${{ inputs.version }}"
        ARCH: "${{ inputs.arch }}"
        TAGS: "${{ inputs.tags }}"
        TARGET: "${{ inputs.target }}"

        # Optional.
        DEV_TAGS: "${{ inputs.dev_tags }}"
        ARM_VERSION: "${{ inputs.arm_version }}"
        PKG_NAME: "${{ inputs.pkg_name }}"
        WORKDIR: "${{ inputs.workdir }}"
        ZIP_NAME: "${{ inputs.zip_artifact_name }}"
        BIN_NAME: "${{ inputs.bin_name }}"

        DOCKERFILE: "${{ inputs.dockerfile }}"

      run: ${{ github.action_path }}/scripts/digest_inputs 

    - name: Setup QEMU in binfmt_misc filesystem
      shell: bash
      run: ${{ github.action_path }}/scripts/register_qemu_binfmt
      
    - name: Download Product Zip Artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.ZIP_NAME }}
        path: ${{ env.ZIP_LOCATION }}

    - name: Extract Product Zip Artifact
      shell: bash
      run: ${{ github.action_path }}/scripts/extract_product_zip

    - name: Docker Build
      shell: bash
      run: ${{ github.action_path}}/scripts/docker_build
    
    - name: Run Test
      if: ${{ env.PLATFORM == 'linux/amd64' && inputs.smoke_test != '' }}
      shell: bash
      run: ${{ inputs.smoke_test }}
      env:
        IMAGE_NAME: ${{env.AUTO_TAG}}

    - name: Upload Prod Tarball
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.TARBALL_NAME }}
        path: ${{ env.TARBALL_NAME }}
        if-no-files-found: error

    - name: Upload Dev Tarball
      uses: actions/upload-artifact@v2
      if: ${{ env.DEV_TAGS != '' }}
      with:
        name: ${{ env.DEV_TARBALL_NAME }}
        path: ${{ env.DEV_TARBALL_NAME }}
        if-no-files-found: error
